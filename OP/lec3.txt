作業系統對上，提供服務，lib 包裝，有可能是 system call
對下管理硬體，cpu driver、memory dirver、IO driver
作業系統在經過 booting 之後，透過 init fork 出很多不同的 process
***************************************************
流程
1. 透過 boot，memory 現在有 op 和第一個程序 init 
2. 第一個程序透過 system call 把其他程式 load 進記憶體
3. 同時有不同程序時，就需要排程，並且 context switch
4. 執行不同 process
***************************************************
假設正在執行 process A (一個管理檔案開啟的程序)， CPU 透過 instruction pointer 指向要執行的記憶體位置，
可能透過偵測滑鼠位置，要開啟的副檔名，查 register table 用什麼 application 開啟，fork 出 process B
***************************************************
user space 應用程式 call fork()，該 fork() 的定義在 os 提供的 libaray，實作就是透過 system call
再來進到 kernel space 範疇，才可以處理危險的 system call
簡單來說，os 是以 lib 的形式存在，用 system call 來發生
***************************************************
通稱 trap 作 exception，例如上敘 fork，當應用程式 call 現在跑到 lib 裡面，然後 extern 一個組語裡面有暫存器的設定，
第一把 EAX 暫存填 0x02 (選定服務)，然後把 int 設為 0x80 代表軟體中斷 
然後就可以透過查表(開機的時候就作好的表) 的方式找到相應的服務
***************************************************
EAX 叫做系統調用號，而 int 叫做中斷號
中斷向量表（Interrupt Vector Table）：這是一個用於x86架構的計算機的資料結構，
它是一個用於查詢中斷號與中斷服務例程（ISR）之間對應關係的表。當計算機遇到中斷時，
它會根據中斷號查找相應的ISR並執行。這樣的表可以是硬件中斷向量表，也可以是軟件中斷向量表，具體取決於系統的實現。

系統調用表（System Call Table）：這是一個用於查詢系統調用號與系統呼叫功能之間對應關係的表。
當程式執行中的中斷指令（int 0x80）觸發了系統呼叫時，
操作系統會根據eax中的系統調用號來查找相應的系統呼叫功能。這個表是操作系統內核中的一個重要結構。
***************************************************
詳細流程
user space : 
1. 應用程式呼叫跑到 glibc
2. glibc 裡面 extern 某個組語的函數 (下面有例子)，設定 int 80 (可能也會設定 exa, exb....暫存)
##########################
組語的函數內容可能包含以下
mov eax, 4          // 指定 sys_write() 
mov ebx, 1          // 檔案描述 stdout
mov ecx, msg        // 把內容複製過去 msg 到 exc	
mov edx, 100        // 長度
int 0x80            // interrupt 種類
#########################
3. 進到 kernel space

kernel space : 
1. IDTR 查 IDT 表，前面都是由硬體達成，找到表之後才透過 interrupt number 找到 IDT 要跳轉到的程序(某個 system call)
2. 該 syscall handler 配合 eax 等等暫存器去 system call table 找相應的動作，就算完成
***************************************************
在轉換space 的時候，會分別用 user stack 跟 kernel stack 作區分
stack 其實就是 sp 在的位置
***************************************************
作業系統是一個會執行的程式其實是不對的，其實就是躺在那邊，interrupt 來才會動，提供服務
作業系統是一堆程式，在記憶體裡面，提供服務的，也存在一些資料結構
可能包含 PCB Process control block 等等的 table，什麼時候存在的，當然是在 fork 的時候被創出來的，
所以以下開始探討 fork
***************************************************
fork 和 exec 的關係
例如透過 word 衍伸叫出一個 ppt，那在 word 裡面會先 fork 產生新的 process，
在把自己用 exec 蓋掉生成 ppt，其實是透過這樣產生新 porcess，ppt 的 ppid 是 word 的 pid
也就是說 word 是 ppt 的 parent
追本溯源，init 是第一個程式，開始創建 PCB，之後才有第一個 fork 和一系列的 fork，然後更新 PCB
***************************************************
為什麼要用 fork 和 exec 產生新 process，因為剛開始不知道從哪裡去拿這個需求，
去哪裡生空間分配空間，所以直接用 fork 去產生一個一個一模一樣的 process 來改
***************************************************
PCB 會為每個 process 創建一個 process descriptor，放在 kernel stack
可能包含
1.Process ID（PID）：進程的唯一識別號。
2.狀態（State）：描述進程當前的狀態，如運行、就緒、等待等。
3.程序計數器（Program Counter，PC）：指向進程執行下一條指令的記憶體地址。
4.寄存器集合：保存進程中各個暫存器的值，以便在上下文切換時保存和恢復進程的內容。
5.記憶體管理資訊：描述進程的記憶體佈局和使用情況。
6.資源管理資訊：描述進程所持有的資源，如打開的文件、管道、Socket 等。
基本上事情都是 parent 處理，但如果 parent 先走呢，會 re-parent，請其他人負責
***************************************************



















